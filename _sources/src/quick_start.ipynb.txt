{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# クイックスタート"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 最適化"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from matlanticgrrm.grrmdata import log2atoms\n",
    "from matlanticgrrm.optimize import ListLBFGS\n",
    "from matlanticgrrm.atomslist import set_calculator, pfp_calculator\n",
    "from pathlib import Path\n",
    "import ase\n",
    "from ase.io import read, iread\n",
    "\n",
    "atoms_list = log2atoms(\"*_EQ_list.log\",\"*.com\",save_folder=\"EQjson\") # GRRMデータのインポート\n",
    "set_calculator(atoms_list, pfp_calculator) # calclatorの設定\n",
    "opt = ListLBFGS(atoms_list,log=\"Log/EQ.log\") # OptimizerにAtomsリストを渡す\n",
    "opt.run(fmax=0.001) # 計算実行\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NEB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from matlanticgrrm.grrmdata import get_connections\n",
    "from matlanticgrrm.neb import ListNEB,nebmake,neb_graph\n",
    "from matlanticgrrm.optimize import ListFIRE\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TS(Saddle)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from matlanticgrrm.optimize import ListSella\n",
    "\n",
    "def calculator():\n",
    "    \"\"\"使用するCalculator\"\"\"\n",
    "    estimator = Estimator(calc_mode=EstimatorCalcMode.CRYSTAL_PLUS_D3)\n",
    "    calc = ASECalculator(estimator)\n",
    "    return calc\n",
    "\n",
    "atoms_list = log2atoms(\"*_TS_list.log\",\"*.com\") # データのインポート(Atomsリストの作成)\n",
    "ma.set_calculator(atoms_list,calculator) # calclatorの設定\n",
    "opt = ListSella(atoms_list,log=\"Log/TS.log\",save_folder=\"TSjson\",retry=5) # OptimizerにAtomsリストを渡す\n",
    "opt.run(fmax=0.01,steps=2000) # 計算実行\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vibrations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from ase.io.trajectory import Trajectory\n",
    "from matlanticgrrm.vibrations import ListVibrations,vib_graph\n",
    "\n",
    "vib = ListVibrations(atoms_list, # atoms_list: Saddle計算後の構造\n",
    "                     indices=[0,1,2,3,4,5,6,7,8], # 動かす原子のindex番号\n",
    "                    )\n",
    "vib.run() # 計算実行\n",
    "\n",
    "# 振動数モード,振動数の表をhtmlに保存 & i_idxに虚振動のmode番号を格納\n",
    "i_mode = vib.summary(html=\"vib_table.html\")　\n",
    "\n",
    "# 虚振動構造を中心としたtrajファイルを作成 & traj_path_listに作成したtrajファイルのパスを格納\n",
    "traj_path_list = vib.write_mode(n=i_mode, kT=300*kB, nimages=30) \n",
    "\n",
    "# ase.io.Trajectoryを要素とするリストを作成\n",
    "traj_list = [Trajectory(traj) if traj else None for traj in traj_path_list]\n",
    "\n",
    "# 振動のエネルギーダイアグラムを作成しhtmlに保存する.TSの位置のindex番号をpickleファイルに保存する\n",
    "vib_graph(traj_list,calculator,html=\"vib_graph.html\",pkl=\"n_idx.pickle\") \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## IRC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "with open(Path(\"../VIB_TS/n_idx.pkl\"),\"rb\") as f:\n",
    "    n_idx = pickle.load(f)\n",
    "\n",
    "IS = []\n",
    "FS = []\n",
    "TS = []\n",
    "for n,traj in zip(n_idx,traj_list): # traj_listはVIBで計算したもの\n",
    "    if n:\n",
    "        IS.append(traj[n-1])\n",
    "        TS.appens(traj[n])\n",
    "        FS.append(traj[n+1])\n",
    "    else:\n",
    "        IS.append(None)\n",
    "        TS.append(None)\n",
    "        FS.append(None)\n",
    "\n",
    "ma.set_calculator(IS,calculator)\n",
    "ma.set_calculator(FS,calculator)\n",
    "\n",
    "###ISの最適化\n",
    "is_opt = ListLBFGS(IS,\n",
    "                logfile=\"IS_Log/EQ.log\",\n",
    "                errorlog=\"IS_error.log\",\n",
    "                save_folder = \"ISjson\"\n",
    "               )\n",
    "is_opt.run(fmax=0.001)\n",
    "\n",
    "###FSの最適化\n",
    "fs_opt = ListLBFGS(FS,\n",
    "                logfile=\"FS_Log/EQ.log\",\n",
    "                errorlog=\"FS_error.log\",\n",
    "                save_folder = \"FSjson\"\n",
    "               )\n",
    "fs_opt.run(fmax=0.001)\n",
    "\n",
    "ma.set_calculator(TS,calculator)\n",
    "\n",
    "make_listlog_file(IS,ts_list,FS,\"Data\") # GRRMのData_EQ_list.log,Data_TS_list.logの作成\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "import pickle\n",
    "from ase.io import iread\n",
    "\n",
    "with open(\"*.pickle\",\"rb\") as f:\n",
    "    l,_ = pickle.load(f)\n",
    "\n",
    "atoms_list = [atoms if i in [0] else None for atoms, i in zip(iread(\"*.traj\"),l)]\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "import pickle\n",
    "from ase.io import iread\n",
    "\n",
    "with open(\"*.pickle\",\"rb\") as f:\n",
    "    l,n = pickle.load(f)\n",
    "gen = iread(\"*.traj\")\n",
    "\n",
    "images_list = []\n",
    "for i in l:\n",
    "    images = []\n",
    "    for _ in range(n):\n",
    "        if i in [0]:\n",
    "            images.append(next(gen))\n",
    "        else:\n",
    "            next(gen)\n",
    "            images = None\n",
    "    images_list.append(images)\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.0 ('MatlanticGrrmENV')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "322120a578bac8ccd61c873c7178b94517c064b029993840191ffc2513bdf3c5"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
